{"version":3,"sources":["components/Square.js","components/Board.js","components/Moves.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","className","Board","squares","renderSquare","i","Moves","history","setStepNumber","setIsNext","stepNumber","jumpTo","step","disabled","length","Game","useState","Array","fill","setHistory","isNext","current","setCurrent","winner","setWinner","useEffect","calculateWinner","lines","a","b","c","h","slice","concat","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8108e35a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport const Square = ({value, onClick}) => (\r\n    <div className=\"square\" onClick={onClick}>\r\n        {value}\r\n    </div>\r\n)","import React from 'react';\r\nimport { Square } from './Square';\r\n\r\n\r\nexport const Board = ({ squares, onClick }) => {\r\n\r\n    const renderSquare = (i) => (\r\n        <Square value={squares[i]} onClick={() => onClick(i)} />\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport const Moves = ({ history, setStepNumber, setIsNext, stepNumber }) => {\r\n\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step)\r\n        setIsNext((step % 2) === 0)\r\n    }\r\n\r\n    return (\r\n        <div className='menu'>\r\n            <button\r\n                className='button'\r\n                onClick={() => jumpTo(stepNumber - 1)}\r\n                disabled={stepNumber === 0}\r\n            >\r\n                Back\r\n            </button>\r\n            <button\r\n                className='button'\r\n                onClick={() => jumpTo(0)}\r\n            >\r\n                New game\r\n            </button>\r\n            <button\r\n                className='button'\r\n                onClick={() => jumpTo(stepNumber + 1)}\r\n                disabled={stepNumber + 1 === history.length}\r\n            >\r\n                Forward\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Board } from './Board';\r\nimport { Moves } from './Moves';\r\n\r\n\r\nexport const Game = () => {\r\n\r\n    const [history, setHistory] = useState([{ squares: Array(9).fill(null) }])\r\n    const [stepNumber, setStepNumber] = useState(0)\r\n    const [isNext, setIsNext] = useState(true)\r\n    const [current, setCurrent] = useState(history[stepNumber])\r\n    const [winner, setWinner] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setCurrent(history[stepNumber])\r\n        setWinner(calculateWinner(current.squares))\r\n    }, [history, stepNumber, current])\r\n\r\n    const calculateWinner = (squares) => {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    const handleClick = (i) => {\r\n        const h = history.slice(0, stepNumber + 1);\r\n        const current = h[h.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = isNext ? \"X\" : \"O\"\r\n        setHistory(h.concat([{ squares }]))\r\n        setStepNumber(h.length)\r\n        setIsNext(!isNext)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <div className='game-info'>\r\n                        {\r\n                            winner\r\n                                ? <> Winner: <span>{winner}</span> </>\r\n                                : <> Next player: <span> {isNext ? \"X\" : \"O\"} </span> </>\r\n                        }\r\n\r\n\r\n                    </div>\r\n                    <Board squares={current.squares} onClick={i => handleClick(i)}\r\n                    />\r\n                </div>\r\n                <Moves\r\n                    history={history}\r\n                    setStepNumber={setStepNumber}\r\n                    setIsNext={setIsNext}\r\n                    stepNumber={stepNumber}\r\n                />\r\n            </div>\r\n        </div >\r\n    );\r\n}","import React from 'react';\nimport { Game } from './components/Game';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}